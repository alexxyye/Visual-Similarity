y_vals <- predict(fit, newx = x_vals, level = 0.95, type = "response")
# Plot the results
ggplot(data.frame(study_effects, sample_sizes, study_labels), aes(x = sample_sizes, y = study_effects)) +
geom_point(aes(size = exp(fit$coef[1] + fit$coef[2] * log(sample_sizes))),
shape = 21, fill = "blue", alpha = 0.7) +
geom_text(aes(label = study_labels), check_overlap = TRUE, vjust = 1.5, hjust = 1.5) +
geom_smooth(aes(x = x_vals, y = y_vals$pred), se = TRUE, colour = "red", method = "lm") +
xlab("Sample Size") +
ylab("Study Effects") +
ggtitle("Meta-Regression Analysis") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
length(x_vals)
length(study_effects)
x_vals <- seq(min(sample_sizes), max(sample_sizes), length.out = 7)
length(study_effects)
length(x_vals)
study_effects <- mod$TE
sample_sizes <- mod$n.e
study_labels <- mod$studlab
study_variances <- mod$seTE
fit <- rma(yi = study_effects, vi = study_variances)
# Predict the fitted values
x_vals <- seq(min(sample_sizes), max(sample_sizes), length.out = 7)
y_vals <- predict(fit, newx = x_vals, level = 0.95, type = "response")
# Plot the results
ggplot(data.frame(study_effects, sample_sizes, study_labels), aes(x = sample_sizes, y = study_effects)) +
geom_point(aes(size = exp(fit$coef[1] + fit$coef[2] * log(sample_sizes))),
shape = 21, fill = "blue", alpha = 0.7) +
geom_text(aes(label = study_labels), check_overlap = TRUE, vjust = 1.5, hjust = 1.5) +
geom_smooth(aes(x = x_vals, y = y_vals$pred), se = TRUE, colour = "red", method = "lm") +
xlab("Sample Size") +
ylab("Study Effects") +
ggtitle("Meta-Regression Analysis") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
#
# ggplot(df, aes(x = study_effects, y = sample_sizes, label = study_labels)) +
#   geom_point(shape = 21, fill = "blue", alpha = 0.7) +
#   geom_text(check_overlap = TRUE, vjust = 1.5, hjust = 1.5) +
#   geom_smooth(method = "lm", se = FALSE, color = "red") +
#   xlab("Study Effects") +
#   ylab("Sample Size") +
#   ggtitle("Bubble Plot with Regression Line") +
#   theme_bw() +
#   theme(plot.title = element_text(hjust = 0.5))
study_effects <- mod$TE
sample_sizes <- mod$n.e
study_labels <- mod$studlab
study_variances <- mod$seTE
fit <- rma(yi = study_effects, vi = study_variances)
# Predict the fitted values
x_vals <- seq(min(sample_sizes), max(sample_sizes), length.out = 7)
y_vals <- predict(fit, newx = x_vals, level = 0.95, type = "response")
# Plot the results
ggplot(data.frame(study_effects, sample_sizes, study_labels), aes(x = sample_sizes, y = study_effects)) +
geom_point(aes(size = exp(fit$coef[1] + fit$coef[2] * log(sample_sizes))),
shape = 21, fill = "blue", alpha = 0.7) +
geom_text(aes(label = study_labels), check_overlap = TRUE, vjust = 1.5, hjust = 1.5) +
# geom_smooth(aes(x = x_vals, y = y_vals$pred), se = TRUE, colour = "red", method = "lm") +
xlab("Sample Size") +
ylab("Study Effects") +
ggtitle("Meta-Regression Analysis") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
#
# ggplot(df, aes(x = study_effects, y = sample_sizes, label = study_labels)) +
#   geom_point(shape = 21, fill = "blue", alpha = 0.7) +
#   geom_text(check_overlap = TRUE, vjust = 1.5, hjust = 1.5) +
#   geom_smooth(method = "lm", se = FALSE, color = "red") +
#   xlab("Study Effects") +
#   ylab("Sample Size") +
#   ggtitle("Bubble Plot with Regression Line") +
#   theme_bw() +
#   theme(plot.title = element_text(hjust = 0.5))
study_effects <- mod$TE
sample_sizes <- mod$n.e
study_labels <- mod$studlab
study_variances <- mod$seTE
fit <- rma(yi = study_effects, vi = study_variances)
# Predict the fitted values
x_vals <- seq(min(sample_sizes), max(sample_sizes), length.out = 7)
y_vals <- predict(fit, newx = x_vals, level = 0.95, type = "response")
# # Plot the results
# ggplot(data.frame(study_effects, sample_sizes, study_labels), aes(x = sample_sizes, y = study_effects)) +
#   geom_point(aes(size = exp(fit$coef[1] + fit$coef[2] * log(sample_sizes))),
#              shape = 21, fill = "blue", alpha = 0.7) +
#   geom_text(aes(label = study_labels), check_overlap = TRUE, vjust = 1.5, hjust = 1.5) +
#   geom_smooth(aes(x = x_vals, y = y_vals$pred), se = TRUE, colour = "red", method = "lm") +
#   xlab("Sample Size") +
#   ylab("Study Effects") +
#   ggtitle("Meta-Regression Analysis") +
#   theme_bw() +
#   theme(plot.title = element_text(hjust = 0.5))
#
ggplot(df, aes(x = study_effects, y = sample_sizes, label = study_labels)) +
geom_point(shape = 21, fill = "blue", alpha = 0.7) +
geom_text(check_overlap = TRUE, vjust = 1.5, hjust = 1.5) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
xlab("Study Effects") +
ylab("Sample Size") +
ggtitle("Bubble Plot with Regression Line") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
knit_with_parameters("~/Documents/GitHub/Visual-Similarity/analysis/VS+META.Rmd")
debugSource("~/Documents/GitHub/Visual-Similarity/analysis/funcs.R", echo=TRUE)
debugSource("~/Documents/GitHub/Visual-Similarity/analysis/funcs.R", echo=TRUE)
a <- get_studylist('obj_num', possibility2(df.filelist))
?all_of
a[[2]]
a <- get_studylist('obj_num, PC', possibility2(df.filelist))
?select
a <- get_studylist('obj_num', 'PC', possibility2(df.filelist))
a <- get_studylist(c('obj_num', 'PC'), possibility2(df.filelist))
a[[2]]
read_csv(v, '/Users/alex/Documents/GitHub/Visual-Similarity/analysis/25ParaCombinations.csv')
v <- read_csv('/Users/alex/Documents/GitHub/Visual-Similarity/analysis/25ParaCombinations.csv')
View(v)
v[1]
v[1][1]
v[[1]]
v[[1]][1]
class(v)
length(v)
nrow(v)
v[[1]]
v[[2]]
v[[1]][1]
for (i in 1:nrow(v)){
s <- v[[1]][i]
ss <- strsplit(s)
v[[1]][i] <- ss
}
for (i in 1:nrow(v)){
s <- v[[1]][i]
ss <- strsplit(s)
v[[1]][i] <- ss
}
for (i in 1:nrow(v)){
s <- v[[1]][i]
ss <- strsplit(s, ',')
v[[1]][i] <- ss
}
class(v[[1]][1])
as.character(v[[1]][1])
v[[1]][1]
s <- as.character(v[[1]][i])
?gsub()
ss <- gsub('\ ' , '', s)
ss
sss <- strsplit(ss, ',')
sss
class(sss)
as.character(sss)
s
class(s)
ss
s <- as.character(v[[1]][i])
ss <- strsplit(s, ',')
s
ss
studylist <- get_studylist(c('obj_num', 'PC'), possibility1(df.filelist))
df <- g_t.test(studylist)
mod <- get_mod(df)
pval <- get_pval.vs(mod)
return(pval)
pval
source("~/Documents/GitHub/Visual-Similarity/analysis/funcs.R", echo=TRUE)
v[[1]][1]
para_name <- v[[1]][1]
result <- all_in1(para_name, possibility2())
result <- all_in1(para_name, possibility2)
result <- all_in1(para_name, 'possibility2')
source("~/Documents/GitHub/Visual-Similarity/analysis/funcs.R", echo=TRUE)
s <- strsplit(v[[1]][2], ',')
s
all_in1(s, 'possibility1')
all_in1(as.character(s), 'possibility1')
s <- strsplit(v[[1]][1], ',')
ss <- as.character(s)
ss
as.array(ss)
as.array(s)
all_in1(as.array(s), 'possibility1')
all_in1(as.character(s), 'possibility1')
for (i in 1:nrow(v)){
s <- strsplit(v[[1]][i], ',')
ss <- as.character(s)
v[[1]][i] <- ss
}
View(v)
getwd()
setwd(/Users/alex/Documents/GitHub/Visual-Similarity/analysis)
setwd('/Users/alex/Documents/GitHub/Visual-Similarity/analysis')
getwd()
setwd('/Users/alex/Documents/GitHub/Visual-Similarity/analysis/')
getwd()
write_csv(v, './25ParaCombinations.csv')
rm(s)
View(v)
View(v)
pvallist <- data.frame(matrix(data = NA, ncol = 3))
colnames(pvallist) <- c('parameters', 'possibility', 'pval')
View(pvallist)
para_name <- c("obj_num", " disc_strk")
poss <- "possibility1"
pvallist[1, 1] <- para_name
pvallist[1, 1] <- as.character(para_name)
para_name[1]
para_name[2]
pvallist[1, 1] <- paste(para_name[1], para_name[2], sep = ',')
pvallist[1, 2] <- poss
pvallist[1, 3] <- all_in1(para_namem, poss)
pvallist[i, 3] <- all_in1(para_name, poss)
knitr::opts_chunk$set(echo = TRUE)
# split raw data by condition
symbol1 <- split_into_2(df.filelist[[1]], 60, 1)
german1 <- split_into_2(df.filelist[[1]], 60, 2)
symbol2 <- split_into_2(df.filelist[[2]], 60, 1)
english2 <- split_into_2(df.filelist[[2]], 60, 2)
symbol3 <- split_into_2(df.filelist[[3]], 59, 1)
english3 <-split_into_2(df.filelist[[3]], 59, 2)
falsefont4 <-split_into_2(df.filelist[[4]], 84, 1)
german4 <- split_into_2(df.filelist[[4]], 84, 2)
chinese5 <- split_into_2(df.filelist[[5]], 60, 1)
korean5 <- split_into_2(df.filelist[[5]], 60, 2)
chinese6 <- split_into_2(df.filelist[[6]], 40, 1)
korean6 <- split_into_2(df.filelist[[6]], 40, 2)
chinese7 <- split_into_2(df.filelist[[7]], 120, 1)
korean7 <- split_into_2(df.filelist[[7]], 120, 2)
# prepare a null mean list
mean_list <- data.frame(matrix(ncol = 6, nrow = 14))
colnames(mean_list) <- c("condition", "obj_num", "disc_strk", "strk_sum", "junc_sum", "PC")
mean_list$condition <- c('symbol1', 'german1', 'symbol2', 'english2', 'symbol3', 'english3',
'falsefont4', 'german4', 'chinese5', 'korean5',
'chinese6', 'korean6', 'chinese7', 'korean7')
# put all data together by condition
cond_list <- list(symbol1, german1, symbol2, english2, symbol3, english3,
falsefont4, german4, chinese5, korean5,
chinese6, korean6, chinese7, korean7)
for (cond_i in 1:14){
for (col_j in 2:6){
mean_ij <- mean(cond_list[[cond_i]][[col_j]])
mean_list[cond_i, col_j] <- mean_ij
}
}
# make a null normalized mean list
norm_mean_list <- data.frame(matrix(data = NA, nrow = 14, ncol = 6))
norm_mean_list[, 2:6] <- normalize_df(mean_list[ , 2:6])
colnames(norm_mean_list) <- c("condition", "obj_num", "disc_strk", "strk_sum", "junc_sum", "PC")
norm_mean_list$condition <- c('symbol1', 'german1', 'symbol2', 'english2', 'symbol3', 'english3',
'falsefont4', 'german4', 'chinese5', 'korean5',
'chinese6', 'korean6', 'chinese7', 'korean7')
norm_1 <- norm_mean_list
study1 <- norm_3[1:2, ]
study1 <- norm_1[1:2, ]
study2 <- norm_1[3:4, ]
study3 <- norm_1[5:6, ]
study4 <- norm_1[7:8, ]
study5 <- norm_1[9:10, ]
study6 <- norm_1[11:12, ]
study7 <- norm_1[13:14, ]
studylist <- list(study1, study2, study3, study4, study5, study6, study7)
n = 0
for (stdy_n in studylist){
n = n + 1
stdy_n <- stdy_n %>% select(condition, strk_sum, PC) # !!!select columns you want!!!
studylist[[n]] <- stdy_n}
para_name <- 'Stk_Sum&PC' # !!!!!CHANGE PARAMETER NAME HERE!!!!!
View(stdy_n)
study1 <- norm_1[1:2, ]
study2 <- norm_1[3:4, ]
study3 <- norm_1[5:6, ]
study4 <- norm_1[7:8, ]
study5 <- norm_1[9:10, ]
study6 <- norm_1[11:12, ]
study7 <- norm_1[13:14, ]
studylist <- list(study1, study2, study3, study4, study5, study6, study7)
n = 0
for (stdy_n in studylist){
n = n + 1
# stdy_n <- stdy_n %>% select(condition, strk_sum, PC) # !!!select columns you want!!!
studylist[[n]] <- stdy_n}
para_name <- 'Stk_Sum&PC' # !!!!!CHANGE PARAMETER NAME HERE!!!!!
View(stdy_n)
pvallist[i, 3] <- all_in1(para_name, poss)
para_name <- pvallist[i, 1] <- paste(para_name[1], para_name[2], sep = ',')
pvallist[i, 2] <- poss
pvallist[i, 3] <- all_in1(para_namem, poss)
para_name <-
c("obj_num", " disc_strk")
View(pvallist)
View(stdy_n)
View(pvallist)
para_name <- pvallist[i, 1] <- paste(para_name[1], para_name[2], sep = ',')
pvallist[i, 2] <- poss
pvallist[i, 3] <- all_in1(c('obj_num', 'disc_strk'), poss)
warnings()
pvallist[1, 3] <- all_in1(c('obj_num', 'disc_strk'), poss)
para_name <- c("obj_num", " strk_sum")
para_name <- v[[1]][1]
para_name
as.array(para_name)
class(as.array(para_name))
poss <- 'possibility2'
all_in1(para_name, poss)
para_name <- v[[1]][1]
pvallist[2, 1] <- paste(para_name[1], para_name[2], sep = ',')
pvallist[2, 1] <- para_name
all_in1(para_name, poss)
all_in1(c("obj_num", " disc_strk"), poss)
all_in1(c(obj_num, disc_strk), poss)
pvallist[2, 3] <- all_in1(c('obj_num', 'disc_strk'), poss)
pvallist[2, 2] <- poss
pvallist[1,1] <-
c("obj_num", " disc_strk")
pvallist[1,1] <-
'c("obj_num", " disc_strk")'
tt <- c(1, 2)
class(tt)
tt <- c('1', '2')
class(tt)
?c
tt <- c('object', 'disc_strk')
?cat
cat(c("obj_sum","disc_strk"))
cat(v[[1]][1])
para_name
para_name <- cat(v[[1]][1])
pvallist[2, 3] <- all_in1(para_name, poss)
para_name
para_name <- cat(v[[1]][1])
para_name
para_name <- cat(v[[1]][1])
para_name
class(cat(v[[1]][1]))
vector(cat(v[[1]][1]))
?vector
as.vector(v[[1]][1])
as.vector(cat(v[[1]][1]))
a <-as.vector(cat(v[[1]][1]))
a
para_name <- eval(parse(text = v[[1]][1]))
para_name
pvallist[i, 2] <- poss
pvallist[2, 3] <- all_in1(para_name, poss)
v[[1]]<-gsub(' ', '', v[[1]])
para_name <- eval(parse(text = v[[1]][1]))
pvallist[i, 2] <- poss
pvallist[2, 3] <- all_in1(para_name, poss)
write_csv(v, '/Users/alex/Documents/GitHub/Visual-Similarity/analysis/25ParaCombinations.csv')
poss_list <- data.frame(matrix(data = NA, nrow = 3, ncol = 1))
poss_list[1] <- c('possibility1', 'possibility2', 'possibility3')
View(poss_list)
rm(poss_list)
poss_list$poss <- c('possibility1', 'possibility2', 'possibility3')
poss_list <- data.frame(poss = character())
poss_list$poss <- c('possibility1', 'possibility2', 'possibility3')
View(poss_list)
poss_list <- data.frame(poss = character(3))
poss_list$poss <- c('possibility1', 'possibility2', 'possibility3')
View(poss_list)
length(v[[1]])
v <- read_csv('/Users/alex/Documents/GitHub/Visual-Similarity/analysis/25ParaCombinations.csv')
pvallist <- data.frame(matrix(data = NA, ncol = 3))
colnames(pvallist) <- c('parameters', 'possibility', 'pval')
poss_list <- data.frame(poss = character(3))
poss_list$poss <- c('possibility1', 'possibility2', 'possibility3')
temp <- data.frame(matrix(data = NA, nrow = 3, ncol = 3))
for (combi in length(v[[1]])){
para_name <- eval(parse(text = v[[1]][1]))
for (i in length(poss_list)){
temp[i, 1] <- para_name
temp[i, 2] <- poss
temp[i, 3] <- all_in1(para_name, poss)
pvallist <- rbind(pvallist, temp)
}
}
View(pvallist)
all_in1(para_name, poss)
View(temp)
temp[1,3] <- all_in1(para_name, poss)
View(temp)
temp[1,1] <- para_name
as.character(para_name)
temp[1,1] <- as.character(para_name)
paste(para_name, sep = ',')
temp[1, 1] <- paste(para_name, sep = ',')
para_name
class(para_name)
paste(para_name, sep = '_')
v[[1]][1]
v[[1]][2]
class(v[[1]][2])
for (combi in length(v[[1]])){
para_name <- eval(parse(text = v[[1]][1]))
for (i in length(poss_list)){
temp[i, 1] <- v[[1]][combi]
temp[i, 2] <- poss
temp[i, 3] <- all_in1(para_name, poss)
pvallist <- rbind(pvallist, temp)
}
}
View(temp)
View(pvallist)
View(temp)
source("~/Documents/GitHub/Visual-Similarity/analysis/funcs.R", echo=TRUE)
source("~/Documents/GitHub/Visual-Similarity/analysis/funcs.R", echo=TRUE)
debugSource("~/Documents/GitHub/Visual-Similarity/analysis/funcs.R", echo=TRUE)
?eval
v[[1]][1]
debugSource("~/Documents/GitHub/Visual-Similarity/analysis/funcs.R", echo=TRUE)
para_name
paste(para_name, sep = '_')
paste(para_name, sep = '_')
a <- paste(para_name, sep = '_')
a
class(a)
for (combi in length(v[[1]])){
para_name <- eval(parse(text = v[[1]][1]))
for (i in length(poss_list)){
temp[i, 1] <- v[[1]][combi]
temp[i, 2] <- poss_list[i]
temp[i, 3] <- all_in1(para_name, poss_list[i])
pvallist <- rbind(pvallist, temp)
}
}
debugSource("~/Documents/GitHub/Visual-Similarity/analysis/funcs.R", echo=TRUE)
poss_list[1]
debugSource("~/Documents/GitHub/Visual-Similarity/analysis/funcs.R", echo=TRUE)
debugSource("~/Documents/GitHub/Visual-Similarity/analysis/funcs.R", echo=TRUE)
View(poss_list)
debugSource("~/Documents/GitHub/Visual-Similarity/analysis/funcs.R", echo=TRUE)
View(poss_list)
length(poss_list)
for (combi in length(v[[1]])){
poss_list
)
debugSource("~/Documents/GitHub/Visual-Similarity/analysis/funcs.R", echo=TRUE)
length(poss_list)
View(pvallist)
View(temp)
for (combi in 1:length(v[[1]])){
para_name <- eval(parse(text = v[[1]][1]))
for (i in 1:length(poss_list)){
temp[i, 1] <- v[[1]][combi]
temp[i, 2] <- poss_list[i]
temp[i, 3] <- all_in1(para_name, poss_list[i])
pvallist <- rbind(pvallist, temp)
}
}
View(temp)
View(pvallist)
for (combi in 1:length(v[[1]])){
para_name <- eval(parse(text = v[[1]][combi]))
for (i in 1:length(poss_list)){
temp[i, 1] <- v[[1]][combi]
temp[i, 2] <- poss_list[i]
temp[i, 3] <- all_in1(para_name, poss_list[i])
pvallist <- rbind(pvallist, temp)
}
}
View(temp)
View(pvallist)
para_name <- eval(parse(text = v[[1]][1]))
para_name
temp[i, 1] <- v[[1]][combi]
temp[i, 2] <- poss_list[i]
temp[1, 1] <- v[[1]][combi]
temp[1, 2] <- poss_list[1]
temp[1, 3] <- all_in1(para_name, poss_list[1])
View(temp)
length(poss_list)
temp[2, 1] <- v[[1]][1]
View(temp)
v <- read_csv('/Users/alex/Documents/GitHub/Visual-Similarity/analysis/25ParaCombinations.csv')
pvallist <- list()
poss_list <- c('possibility1', 'possibility2', 'possibility3')
temp <- data.frame(matrix(data = NA, nrow = 3, ncol = 3))
colnames(temp) <- c('parameters', 'possibility', 'pval')
debugSource("~/Documents/GitHub/Visual-Similarity/analysis/funcs.R", echo=TRUE)
View(temp)
para_name <- eval(parse(text = v[[1]][1]))
temp[i, 1] <- v[[1]][1]
temp[1, 1] <- v[[1]][1]
temp[1, 2] <- poss_list[1]
temp[1, 3] <- all_in1(para_name, poss_list[1])
View(temp)
View(temp)
temp[2, 1] <- v[[1]][1]
temp[2, 2] <- poss_list[2]
i <-2
temp[i, 3] <- all_in1(para_name, poss_list[i])
i <- 3
temp[i, 1] <- v[[1]][combi]
temp[i, 1] <- v[[1]][1]
temp[i, 2] <- poss_list[i]
temp[i, 3] <- all_in1(para_name, poss_list[i])
View(temp)
source("~/Documents/GitHub/Visual-Similarity/analysis/funcs.R", echo=TRUE)
View(temp)
View(temp)
combined_df <- do.call(rbind, pvallist)
View(combined_df)
combined_df[, 1] <- gsub
combined_df[, 1] <- gsub('c(', '')
combined_df[, 1] <- gsub('c(', '', combined_df[, 1])
write_csv(combined_df, './75pvals.csv')
getwd()
setwd(/Users/alex/Documents/GitHub/Visual-Similarity/analysis)
setwd('/Users/alex/Documents/GitHub/Visual-Similarity/analysis')
write_csv(combined_df, './75pvals.csv')
