mean.late.E64,
sd.late.E64,
data = meta,
studlab = meta$author,
method.smd = "Hedges",
method.bias = "Egger")
MetaReg.vs <- metareg(mod, formula = ~ visual.similarity, method.tau = "REML", hakn = TRUE)
# import data
meta <- read_csv("/Users/alex/Documents/GitHub/Visual-Similarity/analysis/meta.csv")
colnames(meta)[30] <- "visual.similarity"
colnames(meta)[31] <- "writing.system"
# replace Visual Similarity Index with results from VS analysis
meta[30] <- rev(df$cohens.d)
# meta[30] <- rev(df$diff)
# call the metacont random effect model
mod = metacont(
n.early,
mean.early.E64,
sd.early.E64,
n.late,
mean.late.E64,
sd.late.E64,
data = meta,
studlab = meta$author,
method.smd = "Hedges",
method.bias = "Egger")
MetaReg.vs <- metareg(mod, formula = ~ visual.similarity, method.tau = "REML", hakn = TRUE)
# import data
meta <- read_csv("/Users/alex/Documents/GitHub/Visual-Similarity/analysis/meta.csv")
colnames(meta)[30] <- "visual.similarity"
colnames(meta)[31] <- "writing.system"
# replace Visual Similarity Index with results from VS analysis
meta[30] <- rev(df$cohens.d)
# meta[30] <- rev(df$diff)
# call the metacont random effect model
mod = metacont(
n.early,
mean.early.E64,
sd.early.E64,
n.late,
mean.late.E64,
sd.late.E64,
data = meta,
studlab = meta$author,
method.smd = "Hedges",
method.bias = "Egger")
MetaReg.vs <- metareg(mod, formula = ~ visual.similarity, method.tau = "REML", hakn = TRUE)
mod
MetaReg.ws <- metareg(mod, formula = ~ writing.system, method.tau = "REML", hakn = TRUE)
View(meta)
# import data
meta <- read_csv("/Users/alex/Documents/GitHub/Visual-Similarity/analysis/meta.csv")
colnames(meta)[30] <- "visual.similarity"
colnames(meta)[31] <- "writing.system"
# replace Visual Similarity Index with results from VS analysis
meta[30] <- rev(df$cohens.d)
# meta[30] <- rev(df$diff)
# call the metacont random effect model
mod = metacont(
n.early,
mean.early.E64,
sd.early.E64,
n.late,
mean.late.E64,
sd.late.E64,
data = meta,
studlab = meta$author,
method.smd = "Hedges",
method.bias = "Egger")
View(df)
# import data
meta <- read_csv("/Users/alex/Documents/GitHub/Visual-Similarity/analysis/meta.csv")
colnames(meta)[30] <- "visual.similarity"
colnames(meta)[31] <- "writing.system"
# replace Visual Similarity Index with results from VS analysis
# meta[30] <- rev(df$cohens.d)
meta[30] <- rev(df$diff)
# call the metacont random effect model
mod = metacont(
n.early,
mean.early.E64,
sd.early.E64,
n.late,
mean.late.E64,
sd.late.E64,
data = meta,
studlab = meta$author,
method.smd = "Hedges",
method.bias = "Egger")
MetaReg.vs <- metareg(mod, formula = ~ visual.similarity, method.tau = "REML", hakn = TRUE)
MetaReg.ws <- metareg(mod, formula = ~ writing.system, method.tau = "REML", hakn = TRUE)
MetaReg.vs
study_effects <- mod$TE
sample_sizes <- mod$n.e
study_labels <- mod$studlab
study_variances <- mod$seTE
fit <- rma(yi = study_effects, vi = study_variances)
# Create a data frame with the study effects, sample sizes, and study labels
df <- data.frame(study_effects, sample_sizes, study_labels)
# Predict the expected study effect for each sample size
pred <- predictInterval(df, level=0.95, digits=3)
library(meta)
?predictInterval
install.packages("merTools")
library(merTools)
study_effects <- mod$TE
sample_sizes <- mod$n.e
study_labels <- mod$studlab
study_variances <- mod$seTE
fit <- rma(yi = study_effects, vi = study_variances)
# Create a data frame with the study effects, sample sizes, and study labels
df <- data.frame(study_effects, sample_sizes, study_labels)
# Predict the expected study effect for each sample size
pred <- predictInterval(df, level=0.95, digits=3)
study_effects <- mod$TE
sample_sizes <- mod$n.e
study_labels <- mod$studlab
study_variances <- mod$seTE
fit <- rma(yi = study_effects, vi = study_variances)
# Create a data frame with the study effects, sample sizes, and study labels
df <- data.frame(study_effects, sample_sizes, study_labels)
# Predict the expected study effect for each sample size
pred <- predictInterval(df, level=0.95)
?predict
study_effects <- mod$TE
sample_sizes <- mod$n.e
study_labels <- mod$studlab
study_variances <- mod$seTE
fit <- rma(yi = study_effects, vi = study_variances)
# Calculate the regression line and confidence intervals
x_vals <- seq(min(sample_sizes), max(sample_sizes), length.out = 100)
preds <- predict(fit, newmods = log(x_vals))
study_effects <- mod$TE
sample_sizes <- mod$n.e
study_labels <- mod$studlab
study_variances <- mod$seTE
fit <- rma(yi = study_effects, vi = study_variances)
# Predict the fitted values
x_vals <- seq(min(sample_sizes), max(sample_sizes), length.out = 100)
y_vals <- predict(fit, newx = x_vals, level = 0.95, type = "response")
# Plot the results
ggplot(data.frame(study_effects, sample_sizes, study_labels), aes(x = sample_sizes, y = study_effects)) +
geom_point(aes(size = exp(fit$coef[1] + fit$coef[2] * log(sample_sizes))),
shape = 21, fill = "blue", alpha = 0.7) +
geom_text(aes(label = study_labels), check_overlap = TRUE, vjust = 1.5, hjust = 1.5) +
geom_smooth(aes(x = x_vals, y = y_vals$pred), se = TRUE, colour = "red", method = "lm") +
xlab("Sample Size") +
ylab("Study Effects") +
ggtitle("Meta-Regression Analysis") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
length(x_vals)
length(study_effects)
x_vals <- seq(min(sample_sizes), max(sample_sizes), length.out = 7)
length(study_effects)
length(x_vals)
study_effects <- mod$TE
sample_sizes <- mod$n.e
study_labels <- mod$studlab
study_variances <- mod$seTE
fit <- rma(yi = study_effects, vi = study_variances)
# Predict the fitted values
x_vals <- seq(min(sample_sizes), max(sample_sizes), length.out = 7)
y_vals <- predict(fit, newx = x_vals, level = 0.95, type = "response")
# Plot the results
ggplot(data.frame(study_effects, sample_sizes, study_labels), aes(x = sample_sizes, y = study_effects)) +
geom_point(aes(size = exp(fit$coef[1] + fit$coef[2] * log(sample_sizes))),
shape = 21, fill = "blue", alpha = 0.7) +
geom_text(aes(label = study_labels), check_overlap = TRUE, vjust = 1.5, hjust = 1.5) +
geom_smooth(aes(x = x_vals, y = y_vals$pred), se = TRUE, colour = "red", method = "lm") +
xlab("Sample Size") +
ylab("Study Effects") +
ggtitle("Meta-Regression Analysis") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
#
# ggplot(df, aes(x = study_effects, y = sample_sizes, label = study_labels)) +
#   geom_point(shape = 21, fill = "blue", alpha = 0.7) +
#   geom_text(check_overlap = TRUE, vjust = 1.5, hjust = 1.5) +
#   geom_smooth(method = "lm", se = FALSE, color = "red") +
#   xlab("Study Effects") +
#   ylab("Sample Size") +
#   ggtitle("Bubble Plot with Regression Line") +
#   theme_bw() +
#   theme(plot.title = element_text(hjust = 0.5))
study_effects <- mod$TE
sample_sizes <- mod$n.e
study_labels <- mod$studlab
study_variances <- mod$seTE
fit <- rma(yi = study_effects, vi = study_variances)
# Predict the fitted values
x_vals <- seq(min(sample_sizes), max(sample_sizes), length.out = 7)
y_vals <- predict(fit, newx = x_vals, level = 0.95, type = "response")
# Plot the results
ggplot(data.frame(study_effects, sample_sizes, study_labels), aes(x = sample_sizes, y = study_effects)) +
geom_point(aes(size = exp(fit$coef[1] + fit$coef[2] * log(sample_sizes))),
shape = 21, fill = "blue", alpha = 0.7) +
geom_text(aes(label = study_labels), check_overlap = TRUE, vjust = 1.5, hjust = 1.5) +
# geom_smooth(aes(x = x_vals, y = y_vals$pred), se = TRUE, colour = "red", method = "lm") +
xlab("Sample Size") +
ylab("Study Effects") +
ggtitle("Meta-Regression Analysis") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
#
# ggplot(df, aes(x = study_effects, y = sample_sizes, label = study_labels)) +
#   geom_point(shape = 21, fill = "blue", alpha = 0.7) +
#   geom_text(check_overlap = TRUE, vjust = 1.5, hjust = 1.5) +
#   geom_smooth(method = "lm", se = FALSE, color = "red") +
#   xlab("Study Effects") +
#   ylab("Sample Size") +
#   ggtitle("Bubble Plot with Regression Line") +
#   theme_bw() +
#   theme(plot.title = element_text(hjust = 0.5))
study_effects <- mod$TE
sample_sizes <- mod$n.e
study_labels <- mod$studlab
study_variances <- mod$seTE
fit <- rma(yi = study_effects, vi = study_variances)
# Predict the fitted values
x_vals <- seq(min(sample_sizes), max(sample_sizes), length.out = 7)
y_vals <- predict(fit, newx = x_vals, level = 0.95, type = "response")
# # Plot the results
# ggplot(data.frame(study_effects, sample_sizes, study_labels), aes(x = sample_sizes, y = study_effects)) +
#   geom_point(aes(size = exp(fit$coef[1] + fit$coef[2] * log(sample_sizes))),
#              shape = 21, fill = "blue", alpha = 0.7) +
#   geom_text(aes(label = study_labels), check_overlap = TRUE, vjust = 1.5, hjust = 1.5) +
#   geom_smooth(aes(x = x_vals, y = y_vals$pred), se = TRUE, colour = "red", method = "lm") +
#   xlab("Sample Size") +
#   ylab("Study Effects") +
#   ggtitle("Meta-Regression Analysis") +
#   theme_bw() +
#   theme(plot.title = element_text(hjust = 0.5))
#
ggplot(df, aes(x = study_effects, y = sample_sizes, label = study_labels)) +
geom_point(shape = 21, fill = "blue", alpha = 0.7) +
geom_text(check_overlap = TRUE, vjust = 1.5, hjust = 1.5) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
xlab("Study Effects") +
ylab("Sample Size") +
ggtitle("Bubble Plot with Regression Line") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
knit_with_parameters("~/Documents/GitHub/Visual-Similarity/analysis/VS+META.Rmd")
library(readr)
meta_ori <- read_csv("/Users/alex/Documents/GitHub/Visual-Similarity/analysis/meta.csv")
meta_ori <- meta_ori[, -c(3:30)] # get what I want
library(readr)
raw_early <- read_csv("Documents/GitHub/Visual-Similarity/EEG data/raw_early.csv")
View(raw_early)
library(readr)
raw_late <- read_csv("Documents/GitHub/Visual-Similarity/EEG data/raw_late.csv")
View(raw_late)
View(meta_ori)
t(raw_early)
raw_early_t <- t(raw_early)
class(raw_early_t)
rm(raw_early_t)
df_early <- data.frame(matrix(data = NA, nrow = 7, ncol = 6))
colnames(df_early) <- c("word.mean", "word.n", "word.sd", "symbol.mean", "symbol.n", "symbol.sd")
for (i in 1:7){
df_early[i, 1] <- raw_early[i, 2]
df_early[i, 2] <- raw_early[i, 3]
df_early[i, 3] <- raw_early[i, 4]
df_early[i, 4] <- raw_early[2*i, 2]
df_early[i, 5] <- raw_early[2*i, 3]
df_early[i, 6] <- raw_early[2*i, 4]
}
df_early
df_late <- data.frame(matrix(data = NA, nrow = 7, ncol = 6))
colnames(df_late) <- c("word.mean", "word.n", "word.sd", "symbol.mean", "symbol.n", "symbol.sd")
for (i in 1:7){
df_late[i, 1] <- raw_late[i, 2]
df_late[i, 2] <- raw_late[i, 3]
df_late[i, 3] <- raw_late[i, 4]
df_late[i, 4] <- raw_late[2*i, 2]
df_late[i, 5] <- raw_late[2*i, 3]
df_late[i, 6] <- raw_late[2*i, 4]
}
meta_early <- cbind(meta_ori, df_early)
meta_late <- cbind(meta_ori, df_late)
meta_early
View(meta_early)
wd_sym_mod = metacont(
word.n,
word.mean,
word.sd,
symbol.n,
symbol.mean,
symbol.sd,
data = meta_early,
studlab = word_symbol$author,
method.smd = "Hedges",
method.bias = "Egger")
library(meta)
library(metafor)
wd_sym_mod = metacont(
word.n,
word.mean,
word.sd,
symbol.n,
symbol.mean,
symbol.sd,
data = meta_early,
studlab = word_symbol$author,
method.smd = "Hedges",
method.bias = "Egger")
wd_sym_mod = metacont(
word.n,
word.mean,
word.sd,
symbol.n,
symbol.mean,
symbol.sd,
data = meta_early,
studlab = meta_early$author,
method.smd = "Hedges",
method.bias = "Egger")
# call the metacont random effect model
wd_sym_early_mod = metacont(
word.n,
word.mean,
word.sd,
symbol.n,
symbol.mean,
symbol.sd,
data = meta_early,
studlab = meta_early$author,
method.smd = "Hedges",
method.bias = "Egger")
View(wd_sym_early_mod)
wd_sym_late_mod = metacont(
word.n,
word.mean,
word.sd,
symbol.n,
symbol.mean,
symbol.sd,
data = meta_late,
studlab = meta_late$author,
method.smd = "Hedges",
method.bias = "Egger")
forest(wd_sym_early_mod)
forest(wd_sym_late_mod)
forest(wd_sym_early_mod)
forest(wd_sym_late_mod)
View(raw_late)
View(raw_late)
View(raw_early)
View(wd_sym_early_mod)
View(meta_early)
View(df_early)
df_early <- read_csv("/Users/alex/Documents/GitHub/Visual-Similarity/EEG data/raw_early")
df_early <- read_csv("/Users/alex/Documents/GitHub/Visual-Similarity/EEG data/raw_early.csv")
df_late <- read_csv("/Users/alex/Documents/GitHub/Visual-Similarity/EEG data/raw_late.csv")
View(df_late)
df_early <- df_early[, -1]
df_late <- df_late[, -1]
View(df_early)
# colnames(df_late) <- c("word.mean", "word.n", "word.sd", "symbol.mean", "symbol.n", "symbol.sd")
# for (i in 1:7){
#   df_late[i, 1] <- raw_late[i, 2]
#   df_late[i, 2] <- raw_late[i, 3]
#   df_late[i, 3] <- raw_late[i, 4]
#   df_late[i, 4] <- raw_late[2*i, 2]
#   df_late[i, 5] <- raw_late[2*i, 3]
#   df_late[i, 6] <- raw_late[2*i, 4]
# }
# final meta_excel
meta_early <- cbind(meta_ori, df_early)
meta_late <- cbind(meta_ori, df_late)
wd_sym_early_mod = metacont(
word.n,
word.mean,
word.sd,
symbol.n,
symbol.mean,
symbol.sd,
data = meta_early,
studlab = meta_early$author,
method.smd = "Hedges",
method.bias = "Egger")
# colnames(df_late) <- c("word.mean", "word.n", "word.sd", "symbol.mean", "symbol.n", "symbol.sd")
# for (i in 1:7){
#   df_late[i, 1] <- raw_late[i, 2]
#   df_late[i, 2] <- raw_late[i, 3]
#   df_late[i, 3] <- raw_late[i, 4]
#   df_late[i, 4] <- raw_late[2*i, 2]
#   df_late[i, 5] <- raw_late[2*i, 3]
#   df_late[i, 6] <- raw_late[2*i, 4]
# }
# final meta_excel
meta_early <- cbind(meta_ori, df_early)
# meta analysis dataframe
meta_ori <- read_csv("/Users/alex/Documents/GitHub/Visual-Similarity/analysis/meta.csv")
meta_ori <- meta_ori[, -c(3:30)] # get what I want
# colnames(df_late) <- c("word.mean", "word.n", "word.sd", "symbol.mean", "symbol.n", "symbol.sd")
# for (i in 1:7){
#   df_late[i, 1] <- raw_late[i, 2]
#   df_late[i, 2] <- raw_late[i, 3]
#   df_late[i, 3] <- raw_late[i, 4]
#   df_late[i, 4] <- raw_late[2*i, 2]
#   df_late[i, 5] <- raw_late[2*i, 3]
#   df_late[i, 6] <- raw_late[2*i, 4]
# }
# final meta_excel
meta_early <- cbind(meta_ori, df_early)
meta_late <- cbind(meta_ori, df_late)
# call the metacont random effect model
wd_sym_early_mod = metacont(
word.n,
word.mean,
word.sd,
symbol.n,
symbol.mean,
symbol.sd,
data = meta_early,
studlab = meta_early$author,
method.smd = "Hedges",
method.bias = "Egger")
wd_sym_late_mod = metacont(
word.n,
word.mean,
word.sd,
symbol.n,
symbol.mean,
symbol.sd,
data = meta_late,
studlab = meta_late$author,
method.smd = "Hedges",
method.bias = "Egger")
forest(wd_sym_early_mod)
forest(wd_sym_late_mod)
setwd('/Users/alex/Documents/GitHub/Visual-Similarity/analysis')
multi.meta <- read_csv('./multi_meta.csv')
poss3 <- read_csv('./poss3_diff.csv')
c <- cbind(multi.meta, poss3[2:6])
yi <- wd_sym_early_mod$TE
vi <- wd_sym_early_mod$seTE
c$yi <- yi
c$vi <- vi
early_reg <- rma(yi = yi,
vi = vi,
mods = ~obj_num,
data = c)
yi <- wd_sym_late_mod$TE
vi <- wd_sym_late_mod$seTE
c$yi <- yi
c$vi <- vi
late_reg <- rma(yi = yi,
vi = vi,
mods = ~obj_num,
data = c)
early_reg
yi <- wd_sym_early_mod$TE
vi <- wd_sym_early_mod$seTE
c$yi <- yi
c$vi <- vi
early_reg <- rma(yi = yi,
vi = vi,
mods = ~PC+obj_num+disc_strk,
data = c)
yi <- wd_sym_late_mod$TE
vi <- wd_sym_late_mod$seTE
c$yi <- yi
c$vi <- vi
late_reg <- rma(yi = yi,
vi = vi,
mods = ~PC+obj_num+disc_strk,
data = c)
early_reg
late_reg
late_reg <- rma(yi = yi,
vi = vi,
mods = ~PC+obj_num,
data = c)
yi <- wd_sym_late_mod$TE
vi <- wd_sym_late_mod$seTE
c$yi <- yi
c$vi <- vi
late_reg <- rma(yi = yi,
vi = vi,
mods = ~PC+obj_num,
data = c)
late_reg
yi <- wd_sym_late_mod$TE
vi <- wd_sym_late_mod$seTE
c$yi <- yi
c$vi <- vi
late_reg <- rma(yi = yi,
vi = vi,
mods = ~disc_strk,
data = c)
late_reg
yi <- wd_sym_late_mod$TE
vi <- wd_sym_late_mod$seTE
c$yi <- yi
c$vi <- vi
late_reg <- rma(yi = yi,
vi = vi,
mods = ~PC+obj_num+disc_strk,
data = c)
late_reg
yi <- wd_sym_early_mod$TE
vi <- wd_sym_early_mod$seTE
c$yi <- yi
c$vi <- vi
early_reg <- rma(yi = yi,
vi = vi,
mods = ~PC+obj_num+disc_strk,
data = c)
early_reg
