mean_df_res <- read_csv("mean_df_res.csv")
setwd("/Users/alex/Documents/GitHub/Visual-Similarity/analysis")
## get data
library(readr)
mean_df_res <- read_csv("mean_df_res.csv")
names(mean_df_res)[1] <- "condition"
View(mean_df_res)
?t.test
symbol1 <- mean_df_res[1, ]
View(symbol1)
View(symbol1)
symbol1 <- mean_df_res[1, 2:7]
View(symbol1)
View(mean_df_res)
symbol1 <- mean_df_res[1, 2:7]
german1 <- mean_df_res[4, 2:7]
t.test(symbol1, german1, paired = TRUE, var.eqaul = TRUE, conf.level = 0.95)
study1 <- data.frame(
group = rep(c("symbol1", "german1")),
weight = c(symbol,  german)
)
# Create a data frame
study1 <- data.frame(
group = rep(c("symbol1", "german1")),
values = c(symbol1,  german1)
)
View(study1)
?unlist
symbol1 <- unlist(mean_df_res[1, 2:7])
german1 <- unlist(mean_df_res[4, 2:7])
class(symbol1)
symbol1
symbol1 <- mean_df_res[1, 2:7]
german1 <- mean_df_res[4, 2:7]
View(german1)
library(reshape2)
symbol1 <- mean_df_res[1, ]
german1 <- mean_df_res[4, ]
symbol1 <- melt(symbol1, id.vars = "condition")
View(symbol1)
study1 <- merge(symbol1, german1)
View(study1)
?merge
symbol1 <- mean_df_res[1, ]
german1 <- mean_df_res[4, ]
View(symbol1)
study1 <- merge(symbol1, german1, all = TRUE)
View(study1)
study1 <- melt(study1, id.vars = "condition")
View(study1)
View(study1)
?group_by
library("dplyr")
study1 <- group_by(study1, condition)
View(study1)
View(mean_df_res)
View(study1)
group_by(study1, condition) %>% summarise(
count = n(),
mean = mean(value, na.rm = TRUE),
sd = sd(value, na.rm = TRUE)
)
symbol1 <- mean_df_res[1, ]
german1 <- mean_df_res[4, ]
study1 <- merge(symbol1, german1, all = TRUE)
# wide to long
library(reshape2)
study1 <- melt(study1, id.vars = "condition")
View(study1)
t.test(condition ~ value,
data = study1,
paired = TRUE,
var.eqaul = TRUE,
conf.level = 0.95)
?t.test
t.test(condition ~ value,
data = study1,
paired = TRUE)
study1 <- study1 %>% group_by(study1, condition)
study1 <- study1 %>% group_by(condition)
View(study1)
?order
study1 <- study1[order(condition)]
# sort data
study1 <- study1[order("condition")]
View(study1)
symbol1 <- mean_df_res[1, ]
german1 <- mean_df_res[4, ]
study1 <- merge(symbol1, german1, all = TRUE)
# wide to long
library(reshape2)
study1 <- melt(study1, id.vars = "condition")
order(study1$condition)
?group_by
study1 <- melt(study1, id.vars = "condition")
symbol1 <- mean_df_res[1, ]
german1 <- mean_df_res[4, ]
study1 <- merge(symbol1, german1, all = TRUE)
library(reshape2)
study1 <- melt(study1, id.vars = "condition")
library(dplyr)
study1 <- study1 %>% group_by(condition)
View(study1)
#get data
symbol1 <- mean_df_res[1, ]
german1 <- mean_df_res[4, ]
study1 <- merge(symbol1, german1, all = TRUE)
# wide to long
library(reshape2)
study1 <- melt(study1, id.vars = "condition")
library(dplyr)
study1_check <- study1 %>% group_by(condition)
View(study1_check)
study1_check <- study1 %>% group_by("condition")
View(study1_check)
study1_check <- study1 %>% group_by(condition)
View(study1_check)
study1_check <- study1 %>% group_by(variable)
View(study1_check)
View(study1)
?arrange
# sort data
library(dplyr)
study1_check <- arrange(study1, condition, by_group= TRUE)
View(study1_check)
t.test(condition ~ value,
data = study1_check,
paired = TRUE)
?subset
study1_test <- study1_check[ , c(1, 3)]
View(study1_test)
t.test(condition ~ value,
data = study1_test,
paired = TRUE)
t.test(value ~ condition,
data = study1_test,
paired = TRUE)
t.test(value ~ condition,
data = study1,
paired = TRUE)
library(readr)
mean_df_res <- read_csv("mean_df_res.csv")
names(mean_df_res)[1] <- "condition" #change 1st column name
## compare between 2 conditions within each study
#get data
symbol1 <- mean_df_res[1, ]
german1 <- mean_df_res[4, ]
study1 <- merge(symbol1, german1, all = TRUE)
# wide to long
library(reshape2)
study1 <- melt(study1, id.vars = "condition")
t.test(value ~ condition,
data = study1,
paired = TRUE)
library(lsr)
install.packages("lsr")
library(lsr)
cohensD(value ~ condition,
data   = study1,
method = "paired")
library(dplyr)
?arrange
library(reshape2)
library(dplyr)
study1 <- melt(study1, id.vars = "condition")
study1 <- arrange(study1, condition, by_group = TURE)
library(reshape2)
library(dplyr)
symbol1 <- mean_df_res[1, ]
german1 <- mean_df_res[4, ]
study1 <- merge(symbol1, german1, all = TRUE)
study1 <- melt(study1, id.vars = "condition")
study1 <- arrange(study1, condition, by_group = TURE)
study1 <- arrange(study1, condition)
View(study1)
View(study1)
cohensD(value ~ condition,
data   = study1,
method = "paired")
t_test <- t.test(value ~ condition,
data = study1,
paired = TRUE)
t_test
## make a function
batch <- function(study1){
# wide to long
study1 <- melt(study1, id.vars = "condition")
study1 <- arrange(study1, condition) #sorting by condition
# paired t-test
t_test <- t.test(value ~ condition,
data = study1,
paired = TRUE)
# effect size
efs <- cohensD(value ~ condition,
data   = study1,
method = "paired")
# exporting data
summaries <- capture.output(print(t_test), print(efs))
writeLines(summaries, con = file(paste(as.character(study1),".txt")))
}
View(mean_df_res)
length(mean_df_res)
nrow(mean_df_res)
symbol1 <- mean_df_res[1, ]
german1 <- mean_df_res[4, ]
study1 <- merge(symbol1, german1, all = TRUE)
symbol2 <- mean_df_res[2, ]
english2 <- mean_df_res[6, ]
study2 <- merge(symbol2, english2, all = TRUE)
symbol3 <- mean_df_res[3, ]
english3 <- mean_df_res[7, ]
study3 <- merge(symbol3, english3, all = TRUE)
falsefont4 <-mean_df_res[8, ]
german4 <- mean_df_res[5, ]
study4 <- merge(falsefont4, german4, all = TRUE)
chinese5 <-mean_df_res[9, ]
korean5 <-mean_df_res[12, ]
study5 <- merge(chinese5, korean5, all = TRUE)
chinese7 <-mean_df_res[10, ]
korean7 <-mean_df_res[13, ]
study6 <- merge(chinese7, korean7, all = TRUE)
chinese8 <-mean_df_res[11, ]
korean8 <-mean_df_res[14, ]
study7 <- merge(chinese8, korean8, all = TRUE)
View(study7)
View(study6)
View(study5)
batch(study2)
as.character(study1)
?do.call
?get
get(study1)
deparse(substitute(study1))
## make a function
batch <- function(study1){
# wide to long
study1 <- melt(study1, id.vars = "condition")
study1 <- arrange(study1, condition) #sorting by condition
# paired t-test
t_test <- t.test(value ~ condition,
data = study1,
paired = TRUE)
# effect size
efs <- cohensD(value ~ condition,
data   = study1,
method = "paired")
# exporting data
summaries <- capture.output(print(t_test), print(efs))
writeLines(summaries, con = file(paste(deparse(substitute(study1)), ".txt")))
}
batch(study1)
batch(study2)
batch <- function(study1){
# wide to long
study1 <- melt(study1, id.vars = "condition")
study1 <- arrange(study1, condition) #sorting by condition
# paired t-test
t_test <- t.test(value ~ condition,
data = study1,
paired = TRUE)
# effect size
efs <- cohensD(value ~ condition,
data   = study1,
method = "paired")
}
batch(study1)
summaries <- capture.output(print(t_test), print(efs))
## make a function
batch <- function(study1, outputPath){
# wide to long
study1 <- melt(study1, id.vars = "condition")
study1 <- arrange(study1, condition) #sorting by condition
# paired t-test
t_test <- t.test(value ~ condition,
data = study1,
paired = TRUE)
# effect size
efs <- cohensD(value ~ condition,
data   = study1,
method = "paired")
# exporting data
summaries <- capture.output(print(t_test), print(efs))
writeLines(summaries, con = file(paste(as.character(outputPath), ".txt")))
}
batch(study1, study1)
batch <- function(study1, outputPath){
# wide to long
study1 <- melt(study1, id.vars = "condition")
study1 <- arrange(study1, condition) #sorting by condition
# paired t-test
t_test <- t.test(value ~ condition,
data = study1,
paired = TRUE)
# effect size
efs <- cohensD(value ~ condition,
data   = study1,
method = "paired")
# exporting data
summaries <- capture.output(print(t_test), print(efs))
writeLines(summaries, con = file(as.character(paste(as.character(outputPath), ".txt"))))
}
batch(study1, study1)
?writeLines
## make a function
batch <- function(study1, outputPath){
# wide to long
study1 <- melt(study1, id.vars = "condition")
study1 <- arrange(study1, condition) #sorting by condition
# paired t-test
t_test <- t.test(value ~ condition,
data = study1,
paired = TRUE)
# effect size
efs <- cohensD(value ~ condition,
data   = study1,
method = "paired")
# exporting data
summaries <- capture.output(print(t_test), print(efs))
writeLines(summaries, con = file("default.txt"))
}
batch <- function(study1){
# wide to long
study1 <- melt(study1, id.vars = "condition")
study1 <- arrange(study1, condition) #sorting by condition
# paired t-test
t_test <- t.test(value ~ condition,
data = study1,
paired = TRUE)
# effect size
efs <- cohensD(value ~ condition,
data   = study1,
method = "paired")
# exporting data
summaries <- capture.output(print(t_test), print(efs))
writeLines(summaries, con = file("default.txt"))
}
batch(study1)
batch(study2)
batch(study3)
batch(study4)
batch(study5)
batch(study4)
batch(study5)
batch(study6)
batch(study7)
batch(study8)
chinese7 <-mean_df_res[10, ]
korean7 <-mean_df_res[13, ]
study7 <- merge(chinese7, korean7, all = TRUE)
chinese8 <-mean_df_res[11, ]
korean8 <-mean_df_res[14, ]
study8 <- merge(chinese8, korean8, all = TRUE)
## make a function
batch(study7)
batch(study8)
batch <- function(study1){
# wide to long
study1 <- melt(study1, id.vars = "condition")
study1 <- arrange(study1, condition) #sorting by condition
# paired t-test
t_test <- t.test(value ~ condition,
data = study1,
paired = TRUE)
# effect size
efs <- cohensD(value ~ condition,
data   = study1,
method = "paired")
# exporting data
nm1 <- paste0(deparse(substitute(study1)),'.csv')
summaries <- capture.output(print(t_test), print(efs))
writeLines(summaries, con = file(nm1))
}
batch(study2)
batch <- function(study1){
# wide to long
study1 <- melt(study1, id.vars = "condition")
study1 <- arrange(study1, condition) #sorting by condition
# paired t-test
t_test <- t.test(value ~ condition,
data = study1,
paired = TRUE)
# effect size
efs <- cohensD(value ~ condition,
data   = study1,
method = "paired")
# exporting data
nm1 <- paste0(deparse(substitute(study1)),'.csv')
summaries <- capture.output(print(t_test), print(efs))
#writeLines(summaries, con = file(nm1))
print(nm1)
}
batch(study2)
deparse(substitute(study1))
paste0(deparse(substitute(study1)),'.csv')
View(study1)
