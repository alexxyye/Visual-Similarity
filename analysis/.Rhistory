?arrange
# sort data
library(dplyr)
study1_check <- arrange(study1, condition, by_group= TRUE)
View(study1_check)
t.test(condition ~ value,
data = study1_check,
paired = TRUE)
?subset
study1_test <- study1_check[ , c(1, 3)]
View(study1_test)
t.test(condition ~ value,
data = study1_test,
paired = TRUE)
t.test(value ~ condition,
data = study1_test,
paired = TRUE)
t.test(value ~ condition,
data = study1,
paired = TRUE)
library(readr)
mean_df_res <- read_csv("mean_df_res.csv")
names(mean_df_res)[1] <- "condition" #change 1st column name
## compare between 2 conditions within each study
#get data
symbol1 <- mean_df_res[1, ]
german1 <- mean_df_res[4, ]
study1 <- merge(symbol1, german1, all = TRUE)
# wide to long
library(reshape2)
study1 <- melt(study1, id.vars = "condition")
t.test(value ~ condition,
data = study1,
paired = TRUE)
library(lsr)
install.packages("lsr")
library(lsr)
cohensD(value ~ condition,
data   = study1,
method = "paired")
library(dplyr)
?arrange
library(reshape2)
library(dplyr)
study1 <- melt(study1, id.vars = "condition")
study1 <- arrange(study1, condition, by_group = TURE)
library(reshape2)
library(dplyr)
symbol1 <- mean_df_res[1, ]
german1 <- mean_df_res[4, ]
study1 <- merge(symbol1, german1, all = TRUE)
study1 <- melt(study1, id.vars = "condition")
study1 <- arrange(study1, condition, by_group = TURE)
study1 <- arrange(study1, condition)
View(study1)
View(study1)
cohensD(value ~ condition,
data   = study1,
method = "paired")
t_test <- t.test(value ~ condition,
data = study1,
paired = TRUE)
t_test
## make a function
batch <- function(study1){
# wide to long
study1 <- melt(study1, id.vars = "condition")
study1 <- arrange(study1, condition) #sorting by condition
# paired t-test
t_test <- t.test(value ~ condition,
data = study1,
paired = TRUE)
# effect size
efs <- cohensD(value ~ condition,
data   = study1,
method = "paired")
# exporting data
summaries <- capture.output(print(t_test), print(efs))
writeLines(summaries, con = file(paste(as.character(study1),".txt")))
}
View(mean_df_res)
length(mean_df_res)
nrow(mean_df_res)
symbol1 <- mean_df_res[1, ]
german1 <- mean_df_res[4, ]
study1 <- merge(symbol1, german1, all = TRUE)
symbol2 <- mean_df_res[2, ]
english2 <- mean_df_res[6, ]
study2 <- merge(symbol2, english2, all = TRUE)
symbol3 <- mean_df_res[3, ]
english3 <- mean_df_res[7, ]
study3 <- merge(symbol3, english3, all = TRUE)
falsefont4 <-mean_df_res[8, ]
german4 <- mean_df_res[5, ]
study4 <- merge(falsefont4, german4, all = TRUE)
chinese5 <-mean_df_res[9, ]
korean5 <-mean_df_res[12, ]
study5 <- merge(chinese5, korean5, all = TRUE)
chinese7 <-mean_df_res[10, ]
korean7 <-mean_df_res[13, ]
study6 <- merge(chinese7, korean7, all = TRUE)
chinese8 <-mean_df_res[11, ]
korean8 <-mean_df_res[14, ]
study7 <- merge(chinese8, korean8, all = TRUE)
View(study7)
View(study6)
View(study5)
batch(study2)
as.character(study1)
?do.call
?get
get(study1)
deparse(substitute(study1))
## make a function
batch <- function(study1){
# wide to long
study1 <- melt(study1, id.vars = "condition")
study1 <- arrange(study1, condition) #sorting by condition
# paired t-test
t_test <- t.test(value ~ condition,
data = study1,
paired = TRUE)
# effect size
efs <- cohensD(value ~ condition,
data   = study1,
method = "paired")
# exporting data
summaries <- capture.output(print(t_test), print(efs))
writeLines(summaries, con = file(paste(deparse(substitute(study1)), ".txt")))
}
batch(study1)
batch(study2)
batch <- function(study1){
# wide to long
study1 <- melt(study1, id.vars = "condition")
study1 <- arrange(study1, condition) #sorting by condition
# paired t-test
t_test <- t.test(value ~ condition,
data = study1,
paired = TRUE)
# effect size
efs <- cohensD(value ~ condition,
data   = study1,
method = "paired")
}
batch(study1)
summaries <- capture.output(print(t_test), print(efs))
## make a function
batch <- function(study1, outputPath){
# wide to long
study1 <- melt(study1, id.vars = "condition")
study1 <- arrange(study1, condition) #sorting by condition
# paired t-test
t_test <- t.test(value ~ condition,
data = study1,
paired = TRUE)
# effect size
efs <- cohensD(value ~ condition,
data   = study1,
method = "paired")
# exporting data
summaries <- capture.output(print(t_test), print(efs))
writeLines(summaries, con = file(paste(as.character(outputPath), ".txt")))
}
batch(study1, study1)
batch <- function(study1, outputPath){
# wide to long
study1 <- melt(study1, id.vars = "condition")
study1 <- arrange(study1, condition) #sorting by condition
# paired t-test
t_test <- t.test(value ~ condition,
data = study1,
paired = TRUE)
# effect size
efs <- cohensD(value ~ condition,
data   = study1,
method = "paired")
# exporting data
summaries <- capture.output(print(t_test), print(efs))
writeLines(summaries, con = file(as.character(paste(as.character(outputPath), ".txt"))))
}
batch(study1, study1)
?writeLines
## make a function
batch <- function(study1, outputPath){
# wide to long
study1 <- melt(study1, id.vars = "condition")
study1 <- arrange(study1, condition) #sorting by condition
# paired t-test
t_test <- t.test(value ~ condition,
data = study1,
paired = TRUE)
# effect size
efs <- cohensD(value ~ condition,
data   = study1,
method = "paired")
# exporting data
summaries <- capture.output(print(t_test), print(efs))
writeLines(summaries, con = file("default.txt"))
}
batch <- function(study1){
# wide to long
study1 <- melt(study1, id.vars = "condition")
study1 <- arrange(study1, condition) #sorting by condition
# paired t-test
t_test <- t.test(value ~ condition,
data = study1,
paired = TRUE)
# effect size
efs <- cohensD(value ~ condition,
data   = study1,
method = "paired")
# exporting data
summaries <- capture.output(print(t_test), print(efs))
writeLines(summaries, con = file("default.txt"))
}
batch(study1)
batch(study2)
batch(study3)
batch(study4)
batch(study5)
batch(study4)
batch(study5)
batch(study6)
batch(study7)
batch(study8)
chinese7 <-mean_df_res[10, ]
korean7 <-mean_df_res[13, ]
study7 <- merge(chinese7, korean7, all = TRUE)
chinese8 <-mean_df_res[11, ]
korean8 <-mean_df_res[14, ]
study8 <- merge(chinese8, korean8, all = TRUE)
## make a function
batch(study7)
batch(study8)
batch <- function(study1){
# wide to long
study1 <- melt(study1, id.vars = "condition")
study1 <- arrange(study1, condition) #sorting by condition
# paired t-test
t_test <- t.test(value ~ condition,
data = study1,
paired = TRUE)
# effect size
efs <- cohensD(value ~ condition,
data   = study1,
method = "paired")
# exporting data
nm1 <- paste0(deparse(substitute(study1)),'.csv')
summaries <- capture.output(print(t_test), print(efs))
writeLines(summaries, con = file(nm1))
}
batch(study2)
batch <- function(study1){
# wide to long
study1 <- melt(study1, id.vars = "condition")
study1 <- arrange(study1, condition) #sorting by condition
# paired t-test
t_test <- t.test(value ~ condition,
data = study1,
paired = TRUE)
# effect size
efs <- cohensD(value ~ condition,
data   = study1,
method = "paired")
# exporting data
nm1 <- paste0(deparse(substitute(study1)),'.csv')
summaries <- capture.output(print(t_test), print(efs))
#writeLines(summaries, con = file(nm1))
print(nm1)
}
batch(study2)
deparse(substitute(study1))
paste0(deparse(substitute(study1)),'.csv')
View(study1)
## get data
mean_df_res <- read_csv("mean_df_res.csv", col_types = cols(sum_of_square = col_skip()))
# packages needed
library(readr)
library(reshape2)
library(dplyr)
library(lsr)
# set cd
setwd("/Users/alex/Documents/GitHub/Visual-Similarity/analysis")
## get data
mean_df_res <- read_csv("mean_df_res.csv", col_types = cols(sum_of_square = col_skip()))
names(mean_df_res)[1] <- "condition" #change 1st column name
symbol1 <- mean_df_res[1, ]
german1 <- mean_df_res[4, ]
study1 <- merge(symbol1, german1, all = TRUE)
symbol2 <- mean_df_res[2, ]
english2 <- mean_df_res[6, ]
study2 <- merge(symbol2, english2, all = TRUE)
symbol3 <- mean_df_res[3, ]
english3 <- mean_df_res[7, ]
study3 <- merge(symbol3, english3, all = TRUE)
falsefont4 <-mean_df_res[8, ]
german4 <- mean_df_res[5, ]
study4 <- merge(falsefont4, german4, all = TRUE)
chinese5 <-mean_df_res[9, ]
korean5 <-mean_df_res[12, ]
study5 <- merge(chinese5, korean5, all = TRUE)
chinese7 <-mean_df_res[10, ]
korean7 <-mean_df_res[13, ]
study6 <- merge(chinese7, korean7, all = TRUE)
chinese8 <-mean_df_res[11, ]
korean8 <-mean_df_res[14, ]
study7 <- merge(chinese8, korean8, all = TRUE)
?paste0
batch <- function(study1){
# wide to long
study1 <- melt(study1, id.vars = "condition")
study1 <- arrange(study1, condition) #sorting by condition
# paired t-test
t_test <- t.test(value ~ condition,
data = study1,
paired = TRUE)
# effect size
efs <- cohensD(value ~ condition,
data   = study1,
method = "paired")
# exporting data
summaries <- capture.output(print(t_test), print(efs))
stdnm <- deparse(substitute(study1))
nms <- paste0(stdnm, '.csv')
writeLines(summaries, con = file(nms))
}
batch(study1)
studylist <- list(study1, study2, study3, study4, study5, study6, study7)
View(studylist)
for (studies in studylist){
# wide to long
studies <- melt(studies, id.vars = "condition")
studies <- arrange(studies, condition) #sorting by condition
# paired t-test
t_test <- t.test(value ~ condition,
data = studies,
paired = TRUE)
# effect size
efs <- cohensD(value ~ condition,
data   = studies,
method = "paired")
# exporting data
summaries <- capture.output(print(t_test), print(efs))
stdnm <- deparse(substitute(studies))
nms <- paste0(stdnm, '.csv')
writeLines(summaries, con = file(nms))
}
for (studies in studylist){
print(studies)}
for (studies in studylist){
class(studies)}
for (studies in studylist){
print(class(studies))}
make_filename = function(label, number){
# these can be easily turned into parameters
suffix = ""
dir = "./"
# doing this, putting it all on a single line or using pipe %>%
# is just matter of style
filename = paste(label, number, suffix, sep="_")
filename = paste0(filename, ".csv")
filename = file.path(dir, filename)
filename
}
make_filename(study, 1)
make_filename(study1, 1)
study1
for (studies in studylist){print(studies)}
for (studies in studylist){print(index(studies)}
for (studies in studylist){print(index(studies)0}
for (studies in studylist){print(index(studies))}
?position
??position
?which
mean_df_res <- read_csv("mean_df_res.csv", col_types = cols(sum_of_square = col_skip()))
names(mean_df_res)[1] <- "condition" #change 1st column name
## compare between 2 conditions within each study
#get data
symbol1 <- mean_df_res[1, ]
german1 <- mean_df_res[4, ]
study1 <- merge(symbol1, german1, all = TRUE)
symbol2 <- mean_df_res[2, ]
english2 <- mean_df_res[6, ]
study2 <- merge(symbol2, english2, all = TRUE)
symbol3 <- mean_df_res[3, ]
english3 <- mean_df_res[7, ]
study3 <- merge(symbol3, english3, all = TRUE)
falsefont4 <-mean_df_res[8, ]
german4 <- mean_df_res[5, ]
study4 <- merge(falsefont4, german4, all = TRUE)
chinese5 <-mean_df_res[9, ]
korean5 <-mean_df_res[12, ]
study5 <- merge(chinese5, korean5, all = TRUE)
chinese7 <-mean_df_res[10, ]
korean7 <-mean_df_res[13, ]
study6 <- merge(chinese7, korean7, all = TRUE)
chinese8 <-mean_df_res[11, ]
korean8 <-mean_df_res[14, ]
study7 <- merge(chinese8, korean8, all = TRUE)
studylist <- list(study1, study2, study3, study4, study5, study6, study7)
summary_list <- list()
i = 0
for (studies in studylist){
i = i + 1
# wide to long
studies <- melt(studies, id.vars = "condition")
studies <- arrange(studies, condition) #sorting by condition
# paired t-test
t_test <- t.test(value ~ condition,
data = studies,
paired = TRUE)
# effect size
efs <- cohensD(value ~ condition,
data   = studies,
method = "paired")
summaries <- capture.output(print(t_test), print(efs))
summary_list[[i]] <- summaries
}
View(summary_list)
summary_list[[1]]
# exporting data
writeLines(summary_list, con = file('summaries.csv'))
?writeLines
as.character(summaries)
as.character(summary_list)
cha_sum_list <- as.character(summary_list)
writeLines(summary_list, con = file('summaries.csv'))
cha_sum_list <- as.character(summary_list)
writeLines(cha_sum_list, con = file('summaries.csv'))
summaries <- capture.output(print(t_test), print(efs))
# packages needed
library(readr)
library(reshape2)
library(dplyr)
library(lsr)
# set cd
setwd("/Users/alex/Documents/GitHub/Visual-Similarity/analysis")
## get data
mean_df_res <- read_csv("mean_df_res.csv", col_types = cols(sum_of_square = col_skip()))
names(mean_df_res)[1] <- "condition" #change 1st column name
## compare between 2 conditions within each study
#get data
symbol1 <- mean_df_res[1, ]
german1 <- mean_df_res[4, ]
study1 <- merge(symbol1, german1, all = TRUE)
symbol2 <- mean_df_res[2, ]
english2 <- mean_df_res[6, ]
study2 <- merge(symbol2, english2, all = TRUE)
symbol3 <- mean_df_res[3, ]
english3 <- mean_df_res[7, ]
study3 <- merge(symbol3, english3, all = TRUE)
falsefont4 <-mean_df_res[8, ]
german4 <- mean_df_res[5, ]
study4 <- merge(falsefont4, german4, all = TRUE)
chinese5 <-mean_df_res[9, ]
korean5 <-mean_df_res[12, ]
study5 <- merge(chinese5, korean5, all = TRUE)
chinese7 <-mean_df_res[10, ]
korean7 <-mean_df_res[13, ]
study6 <- merge(chinese7, korean7, all = TRUE)
chinese8 <-mean_df_res[11, ]
korean8 <-mean_df_res[14, ]
study7 <- merge(chinese8, korean8, all = TRUE)
studylist <- list(study1, study2, study3, study4, study5, study6, study7)
#
# # filename function
# make_filename = function(label, number){
#   # these can be easily turned into parameters
#   suffix = ""
#   dir = "./"
#
#   # doing this, putting it all on a single line or using pipe %>%
#   # is just matter of style
#   filename = paste(label, number, suffix, sep="_")
#   filename = paste0(filename, ".csv")
#   filename = file.path(dir, filename)
#
#   filename
# }
#
# combinations = expand.grid("label"=string_label, "number"=string_number)
# filenames = mapply(make_filename, combinations$label, combinations$number)
#
# save_element = function(element, label, number){
#   filename = make_filename(label, number)
#   write.csv(element, filename,row.names=TRUE)
# }
#
# combinations = expand.grid("label"=string_label, "number"=string_number)
# mapply(save_element, myelement, combinations$label, combinations$number)
summary_list <- list()
i = 0
for (studies in studylist){
i = i + 1
# wide to long
studies <- melt(studies, id.vars = "condition")
studies <- arrange(studies, condition) #sorting by condition
# paired t-test
t_test <- t.test(value ~ condition,
data = studies,
paired = TRUE)
# effect size
efs <- cohensD(value ~ condition,
data   = studies,
method = "paired")
summaries <- capture.output(print(t_test), print(efs))
summary_list[[i]] <- summaries
}
# exporting data
cha_sum_list <- as.character(summary_list)
writeLines(cha_sum_list, con = file('summaries.txt'))
